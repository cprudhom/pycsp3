<instance format="XCSP3" type="COP">
  <variables>
    <var id="q" note="q is the cell for the queen"> 0..35 </var>
    <array id="x" note="x[i] is the cell for the i+1th value" size="[36]"> 0..35 </array>
  </variables>
  <constraints>
    <allDifferent note="all values are put in different cells"> x[] </allDifferent>
    <slide note="ensuring a knight move between two successive values">
      <list> x[] </list>
      <intension> or(and(eq(dist(div(%0,6),div(%1,6)),1),eq(dist(mod(%0,6),mod(%1,6)),2)),and(eq(dist(div(%0,6),div(%1,6)),2),eq(dist(mod(%0,6),mod(%1,6)),1))) </intension>
    </slide>
  </constraints>
  <objectives>
    <minimize note="minimizing the number of free primes" type="sum"> not(and(ne(q,x[1]),or(eq(mod(q,6),mod(x[1],6)),eq(div(q,6),div(x[1],6)),eq(dist(div(q,6),div(x[1],6)),dist(mod(q,6),mod(x[1],6)))))) not(and(ne(q,x[2]),or(eq(mod(q,6),mod(x[2],6)),eq(div(q,6),div(x[2],6)),eq(dist(div(q,6),div(x[2],6)),dist(mod(q,6),mod(x[2],6)))))) not(and(ne(q,x[4]),or(eq(mod(q,6),mod(x[4],6)),eq(div(q,6),div(x[4],6)),eq(dist(div(q,6),div(x[4],6)),dist(mod(q,6),mod(x[4],6)))))) not(and(ne(q,x[6]),or(eq(mod(q,6),mod(x[6],6)),eq(div(q,6),div(x[6],6)),eq(dist(div(q,6),div(x[6],6)),dist(mod(q,6),mod(x[6],6)))))) not(and(ne(q,x[10]),or(eq(mod(q,6),mod(x[10],6)),eq(div(q,6),div(x[10],6)),eq(dist(div(q,6),div(x[10],6)),dist(mod(q,6),mod(x[10],6)))))) not(and(ne(q,x[12]),or(eq(mod(q,6),mod(x[12],6)),eq(div(q,6),div(x[12],6)),eq(dist(div(q,6),div(x[12],6)),dist(mod(q,6),mod(x[12],6)))))) not(and(ne(q,x[16]),or(eq(mod(q,6),mod(x[16],6)),eq(div(q,6),div(x[16],6)),eq(dist(div(q,6),div(x[16],6)),dist(mod(q,6),mod(x[16],6)))))) not(and(ne(q,x[18]),or(eq(mod(q,6),mod(x[18],6)),eq(div(q,6),div(x[18],6)),eq(dist(div(q,6),div(x[18],6)),dist(mod(q,6),mod(x[18],6)))))) not(and(ne(q,x[22]),or(eq(mod(q,6),mod(x[22],6)),eq(div(q,6),div(x[22],6)),eq(dist(div(q,6),div(x[22],6)),dist(mod(q,6),mod(x[22],6)))))) not(and(ne(q,x[28]),or(eq(mod(q,6),mod(x[28],6)),eq(div(q,6),div(x[28],6)),eq(dist(div(q,6),div(x[28],6)),dist(mod(q,6),mod(x[28],6)))))) not(and(ne(q,x[30]),or(eq(mod(q,6),mod(x[30],6)),eq(div(q,6),div(x[30],6)),eq(dist(div(q,6),div(x[30],6)),dist(mod(q,6),mod(x[30],6)))))) </minimize>
  </objectives>
</instance>
