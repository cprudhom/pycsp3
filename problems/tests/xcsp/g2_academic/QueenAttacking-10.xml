<instance format="XCSP3" type="COP">
  <variables>
    <var id="q" note="q is the cell for the queen"> 0..99 </var>
    <array id="x" note="x[i] is the cell for the i+1th value" size="[100]"> 0..99 </array>
  </variables>
  <constraints>
    <allDifferent note="all values are put in different cells"> x[] </allDifferent>
    <slide note="ensuring a knight move between two successive values">
      <list> x[] </list>
      <intension> or(and(eq(dist(div(%0,10),div(%1,10)),1),eq(dist(mod(%0,10),mod(%1,10)),2)),and(eq(dist(div(%0,10),div(%1,10)),2),eq(dist(mod(%0,10),mod(%1,10)),1))) </intension>
    </slide>
  </constraints>
  <objectives>
    <minimize note="minimizing the number of free primes" type="sum"> not(and(ne(q,x[1]),or(eq(mod(q,10),mod(x[1],10)),eq(div(q,10),div(x[1],10)),eq(dist(div(q,10),div(x[1],10)),dist(mod(q,10),mod(x[1],10)))))) not(and(ne(q,x[2]),or(eq(mod(q,10),mod(x[2],10)),eq(div(q,10),div(x[2],10)),eq(dist(div(q,10),div(x[2],10)),dist(mod(q,10),mod(x[2],10)))))) not(and(ne(q,x[4]),or(eq(mod(q,10),mod(x[4],10)),eq(div(q,10),div(x[4],10)),eq(dist(div(q,10),div(x[4],10)),dist(mod(q,10),mod(x[4],10)))))) not(and(ne(q,x[6]),or(eq(mod(q,10),mod(x[6],10)),eq(div(q,10),div(x[6],10)),eq(dist(div(q,10),div(x[6],10)),dist(mod(q,10),mod(x[6],10)))))) not(and(ne(q,x[10]),or(eq(mod(q,10),mod(x[10],10)),eq(div(q,10),div(x[10],10)),eq(dist(div(q,10),div(x[10],10)),dist(mod(q,10),mod(x[10],10)))))) not(and(ne(q,x[12]),or(eq(mod(q,10),mod(x[12],10)),eq(div(q,10),div(x[12],10)),eq(dist(div(q,10),div(x[12],10)),dist(mod(q,10),mod(x[12],10)))))) not(and(ne(q,x[16]),or(eq(mod(q,10),mod(x[16],10)),eq(div(q,10),div(x[16],10)),eq(dist(div(q,10),div(x[16],10)),dist(mod(q,10),mod(x[16],10)))))) not(and(ne(q,x[18]),or(eq(mod(q,10),mod(x[18],10)),eq(div(q,10),div(x[18],10)),eq(dist(div(q,10),div(x[18],10)),dist(mod(q,10),mod(x[18],10)))))) not(and(ne(q,x[22]),or(eq(mod(q,10),mod(x[22],10)),eq(div(q,10),div(x[22],10)),eq(dist(div(q,10),div(x[22],10)),dist(mod(q,10),mod(x[22],10)))))) not(and(ne(q,x[28]),or(eq(mod(q,10),mod(x[28],10)),eq(div(q,10),div(x[28],10)),eq(dist(div(q,10),div(x[28],10)),dist(mod(q,10),mod(x[28],10)))))) not(and(ne(q,x[30]),or(eq(mod(q,10),mod(x[30],10)),eq(div(q,10),div(x[30],10)),eq(dist(div(q,10),div(x[30],10)),dist(mod(q,10),mod(x[30],10)))))) not(and(ne(q,x[36]),or(eq(mod(q,10),mod(x[36],10)),eq(div(q,10),div(x[36],10)),eq(dist(div(q,10),div(x[36],10)),dist(mod(q,10),mod(x[36],10)))))) not(and(ne(q,x[40]),or(eq(mod(q,10),mod(x[40],10)),eq(div(q,10),div(x[40],10)),eq(dist(div(q,10),div(x[40],10)),dist(mod(q,10),mod(x[40],10)))))) not(and(ne(q,x[42]),or(eq(mod(q,10),mod(x[42],10)),eq(div(q,10),div(x[42],10)),eq(dist(div(q,10),div(x[42],10)),dist(mod(q,10),mod(x[42],10)))))) not(and(ne(q,x[46]),or(eq(mod(q,10),mod(x[46],10)),eq(div(q,10),div(x[46],10)),eq(dist(div(q,10),div(x[46],10)),dist(mod(q,10),mod(x[46],10)))))) not(and(ne(q,x[52]),or(eq(mod(q,10),mod(x[52],10)),eq(div(q,10),div(x[52],10)),eq(dist(div(q,10),div(x[52],10)),dist(mod(q,10),mod(x[52],10)))))) not(and(ne(q,x[58]),or(eq(mod(q,10),mod(x[58],10)),eq(div(q,10),div(x[58],10)),eq(dist(div(q,10),div(x[58],10)),dist(mod(q,10),mod(x[58],10)))))) not(and(ne(q,x[60]),or(eq(mod(q,10),mod(x[60],10)),eq(div(q,10),div(x[60],10)),eq(dist(div(q,10),div(x[60],10)),dist(mod(q,10),mod(x[60],10)))))) not(and(ne(q,x[66]),or(eq(mod(q,10),mod(x[66],10)),eq(div(q,10),div(x[66],10)),eq(dist(div(q,10),div(x[66],10)),dist(mod(q,10),mod(x[66],10)))))) not(and(ne(q,x[70]),or(eq(mod(q,10),mod(x[70],10)),eq(div(q,10),div(x[70],10)),eq(dist(div(q,10),div(x[70],10)),dist(mod(q,10),mod(x[70],10)))))) not(and(ne(q,x[72]),or(eq(mod(q,10),mod(x[72],10)),eq(div(q,10),div(x[72],10)),eq(dist(div(q,10),div(x[72],10)),dist(mod(q,10),mod(x[72],10)))))) not(and(ne(q,x[78]),or(eq(mod(q,10),mod(x[78],10)),eq(div(q,10),div(x[78],10)),eq(dist(div(q,10),div(x[78],10)),dist(mod(q,10),mod(x[78],10)))))) not(and(ne(q,x[82]),or(eq(mod(q,10),mod(x[82],10)),eq(div(q,10),div(x[82],10)),eq(dist(div(q,10),div(x[82],10)),dist(mod(q,10),mod(x[82],10)))))) not(and(ne(q,x[88]),or(eq(mod(q,10),mod(x[88],10)),eq(div(q,10),div(x[88],10)),eq(dist(div(q,10),div(x[88],10)),dist(mod(q,10),mod(x[88],10)))))) not(and(ne(q,x[96]),or(eq(mod(q,10),mod(x[96],10)),eq(div(q,10),div(x[96],10)),eq(dist(div(q,10),div(x[96],10)),dist(mod(q,10),mod(x[96],10)))))) </minimize>
  </objectives>
</instance>
